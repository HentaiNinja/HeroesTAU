package pl.hentaininja.repository;

import pl.hentaininja.herocrud.domain.Hero;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import com.sun.rmi.rmid.ExecOptionPermission;

public class HeroRepositoryImpl implements HeroRepository {

    private Connection connection;

    private PreparedStatement addHeroStmt;
    private PreparedStatement getAllHeroStmt;

    public HeroRepositoryImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate(
            "CREATE TABLE "
                + "Hero(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                "name varchar(20) NOT NULL, " + "class varchar(20))");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Hero".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    public List<hero> getAllHeroes() {
        List<Person> heroes = new LinkedList<>();
        try {
            ResultSet rs = getAllHeroesStmt.executeQuery();

            while (rs.next()) {
                Hero h = new hero();
                h.setId(rs.getInt("id"));
                h.setName(rs.getString("name"));
                h.setClass(rs.getString("class"));
                heroes.add(h);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return heroes;
    }

    @Override
    public void initDatabase() {

    }

    @Override
    public Hero getById(Long id) {
        return null;
    }

    @Override
    public void add(Hero hero) {
        try{
            addHeroStmt.setInt(1, h.getId());
            addHeroStmt.setString(2, h.getName());
            addHeroStmt.setString(3, h.getClass());
            count = addHeroStmt.executeUpdate(); 
        }
        catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

    @Override
    public void delete(Hero hero) {

    }

    @Override
    public void update(long oldId, Hero newHero) {

    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    /**
     * @param connection the connection to set
     */
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addPersonStmt = connection.
            prepareStatement
            ("INSERT INTO Heroes (name, str) VALUES (?, ?)");
        getAllHeroesStmt = connection.
        prepareStatement("SELECT * FROM Hero");
    }


}