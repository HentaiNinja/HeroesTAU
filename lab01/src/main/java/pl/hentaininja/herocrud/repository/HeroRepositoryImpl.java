package pl.hentaininja.herocrud.repository;

import pl.hentaininja.herocrud.domain.Hero;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.DriverManager;
import java.util.LinkedList;
import java.util.List;

import org.springframework.stereotype.Component;

@Component
public class HeroRepositoryImpl implements HeroRepository {

    Connection connection;

    private PreparedStatement addHeroStmt;
	private PreparedStatement getAllHeroStmt;
	private PreparedStatement deleteHeroStmt;

	private PreparedStatement getByIdStmt;
	private PreparedStatement getByNameStmt;
    private PreparedStatement updateHeroStmt;

    public HeroRepositoryImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            createTables();
        }
        setConnection(connection);
    }

    public HeroRepositoryImpl() throws SQLException {
        this.connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		if(!isDatabaseReady())
		{
			createTables();
		}
        this.setConnection(this.connection);
    }

    public void createTables() throws SQLException {
        connection.createStatement().executeUpdate(
            "CREATE TABLE "
                + "Hero(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                "name varchar(20) NOT NULL, klasa varchar(20))");
    }

    public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Hero".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    public Connection getConnection()
    {
     return connection;
    }



  public void setConnection(Connection connection) throws SQLException{
      this.connection = connection;
      addHeroStmt = connection.prepareStatement("INSERT INTO Hero(id,name,klasa) VALUES (?,?,?)");
      getAllHeroStmt = connection.prepareStatement("SELECT id,name,klasa FROM Hero");
      getByIdStmt = connection.prepareStatement("SELECT * FROM Hero WHERE id = ? ");	
      updateHeroStmt = connection.prepareStatement("UPDATE Hero SET name= ?, klasa= ? WHERE id = ?");
      deleteHeroStmt = connection.prepareStatement("DELETE FROM Hero WHERE id = ?");
      getByNameStmt = connection.prepareStatement("SELECT * FROM Hero WHERE name= ?");
}

    @Override
    public List<Hero> getAll() {
        List<Hero> heroes = new LinkedList<Hero>();
        try
        {
            ResultSet rs = getAllHeroStmt.executeQuery();
            
            while(rs.next())
           {
                Hero h = new Hero();
                h.setid(rs.getInt("id"));
                h.setname(rs.getString("name"));
                h.setklasa(rs.getString("klasa"));
                heroes.add(h);
            }
        }

        catch(SQLException e)
        {
            e.printStackTrace();
        }
        return heroes;
    }

    @Override
    public int add(Hero h) {
        int count = 0;
        try{
            addHeroStmt.setInt(1, h.getid());
            addHeroStmt.setString(2, h.getname());
            addHeroStmt.setString(3, h.getklasa());
            count = addHeroStmt.executeUpdate(); 
        }
        catch (SQLException e){
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
	public Hero getById(long id) throws SQLException {
		
		Hero h = new Hero();
		try
		{
			getByIdStmt.setLong(1, id);		
			ResultSet rs = getByIdStmt.executeQuery();
			while(rs.next())
				{
				h.setid(rs.getInt("id"));
				h.setname(rs.getString("name"));
				h.setklasa(rs.getString("klasa"));
				}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return h;
    }

    @Override
	public int update(Hero h, long id) throws SQLException{
		int count = 0;
	
		try
		{
			updateHeroStmt.setString(1, h.getname());
			updateHeroStmt.setString(2, h.getklasa());
			updateHeroStmt.setLong(3, id);
			count = updateHeroStmt.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		} 
		return count;
    }
    
    @Override
	public int delete(long id) {
        int count = 0;
        try
		{
			deleteHeroStmt.setLong(1, id);
			deleteHeroStmt.executeUpdate();
		}catch(SQLException e)
		{
			e.printStackTrace();
        }
        return count;
    }

    @Override
	public Hero getByName(String name) {
		Hero hero = new Hero();
		try
		{
			getByNameStmt.setString(1, name);	
			ResultSet rs = getByNameStmt.executeQuery();

			while(rs.next())
			{
				hero.setid(rs.getInt("id"));
				hero.setname(rs.getString("name"));
				hero.setklasa(rs.getString("klasa"));
			}
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return hero;
}

}